using UnityEngine;

#ROOTNAMESPACEBEGIN#
    /// <summary>
    /// TODO: Provide a summary of your class here.
    /// To create an auto-generated summary template
    /// type 3 /// slash characters after you have
    /// written your class or method signature.
    /// </summary>
    public class #SCRIPTNAME# : MonoBehaviour
    {
        /**
         * TODO: General Structure Ideas:
         * 
         * Try to keep an order of fields from most complex to primitive.
         * Keep fields / memebers private whenever possible, provide access points (get, set)!
         * GameObject go;
         * struct point;
         * float num;
         * bool truthy;
         * 
         * Constants before variables maybe too.
         * const int TIME_PLANNED_FOR_THIS
         * int timeSpentOnThis
         * 
         * Also from most public to private. Valid for methods too.
         * public
         * internal
         * virtual
         * protected
         * private
         * 
         *  Then only probably by alphabet. If at all
         */

        #region Serialized Fields

        // TODO: Put all the serialized fields here.

        #endregion


        #region Fields

        // TODO: Put general non-serialized fields here.

        #endregion


        #region Events

        // TODO: Put custom event methods here.
        // Such as Actions, UnityEvents or delegates.
        // Usually for character controlls or messaging in MVC patterns.
        
        #NOTRIM#

        #endregion


        #region GetSets / Properties

        // TODO: Put Auto-Properties to your fields here.
        //
        // These are used for private fields as getters and setters.
        // Since they are very game specific, they are down here.
        // The structure is (amost) always the same. Copy-Paste.

        /**
        public returnType FieldNameWithCapitalStart
        {
            get => fieldName;
            set => fieldName = value;
        }
        */

        #endregion


        #region Unity Built-Ins

        // TODO: Put Unity built-in loop methods here.
        // Such as Awake, Start, Update.
        // But also OnEnable, OnDestroy, OnTrigger and such.
        void Awake()
        {
            #NOTRIM#
        }

        // Called once when an object is enabled.
        // After Awake but before Start.
        private void OnEnable()
        {
            #NOTRIM#
        }

        // Start is called before the first frame update
        void Start()
        {
            #NOTRIM#
        }

        // Called zero to multiple times BETWEEN frame, for physics, FPS INdependent
        void FixedUpdate()
        {
            #NOTRIM#
        }

        // Update is called once per frame; for rendering, FPS dependent
        void Update()
        {
            #NOTRIM#
        }

        // Called once when the object is deactivated
        private void OnDisable()
        {
            #NOTRIM#
        }

        // Called once when the object is removed from the scene entirely
        private void OnDestroy()
        {
            #NOTRIM#
        }

        #endregion


        #region Game Mechanics / Methods

        // TODO: Put your game specific mechanics here.
        // If they can be grouped by functionality, do so.

        /// <summary>
        /// TODO: Provide a summary for the method
        /// </summary>
        /// <param name="param">List the parameters.</param>
        /// <returns>Specify what it returns, if it does so.</returns>
        public void TemplateMethod(bool param)
        {
            // TODO: YOUR CODE GOES HERE
        }

        #endregion


        #region Overarching Methods / Helpers

        // TODO: Put your helper methods here.
        // If they can be grouped by functionality, do so.

        /// <summary>
        /// TODO: Provide a summary for the method
        /// </summary>
        /// <param name="param">List the parameters.</param>
        /// <returns>Specify what it returns, if it does so.</returns>
        private void TemplateHelper(bool param)
        {
            // TODO: YOUR CODE GOES HERE
        }

        #endregion


        #region Gizmos

        /// <summary>
        /// Draws helpful overlays in the Editor only.
        /// Runs and displays all the time.
        /// </summary>
        private void OnDrawGizmos()
        {
            #NOTRIM#
        }

        /// <summary>
        /// Draws helpful overlays in the Editor only.
        /// Runs only on selected objects, changing views.
        /// </summary>
        private void OnDrawGizmosSelected()
        {
             #NOTRIM#
        }

        #endregion
    }
#ROOTNAMESPACEND#